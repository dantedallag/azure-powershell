// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Resources.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Deployment stack properties.
    /// </summary>
    public partial class DeploymentStackProperties : DeploymentStacksError
    {
        /// <summary>
        /// Initializes a new instance of the DeploymentStackProperties class.
        /// </summary>
        public DeploymentStackProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DeploymentStackProperties class.
        /// </summary>
        /// <param name="actionOnUnmanage">Defines the behavior of resources
        /// that are no longer managed after the stack is updated or
        /// deleted.</param>
        /// <param name="denySettings">Defines how resources deployed by the
        /// stack are locked.</param>
        /// <param name="template">The template content. You use this element
        /// when you want to pass the template syntax directly in the request
        /// rather than link to an existing template. It can be a JObject or
        /// well-formed JSON string. Use either the templateLink property or
        /// the template property, but not both.</param>
        /// <param name="templateLink">The URI of the template. Use either the
        /// templateLink property or the template property, but not
        /// both.</param>
        /// <param name="parameters">Name and value pairs that define the
        /// deployment parameters for the template. Use this element when
        /// providing the parameter values directly in the request, rather than
        /// linking to an existing parameter file. Use either the
        /// parametersLink property or the parameters property, but not
        /// both.</param>
        /// <param name="parametersLink">The URI of parameters file. Use this
        /// element to link to an existing parameters file. Use either the
        /// parametersLink property or the parameters property, but not
        /// both.</param>
        /// <param name="debugSetting">The debug setting of the
        /// deployment.</param>
        /// <param name="deploymentScope">The scope at which the initial
        /// deployment should be created. If a scope is not specified, it will
        /// default to the scope of the deployment stack. Valid scopes are:
        /// management group (format:
        /// '/providers/Microsoft.Management/managementGroups/{managementGroupId}'),
        /// subscription (format: '/subscriptions/{subscriptionId}'), resource
        /// group (format:
        /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}').</param>
        /// <param name="description">Deployment stack description. Max length
        /// of 4096 characters.</param>
        /// <param name="provisioningState">State of the deployment stack.
        /// Possible values include: 'creating', 'validating', 'waiting',
        /// 'deploying', 'canceling', 'locking', 'deletingResources',
        /// 'succeeded', 'failed', 'canceled', 'deleting'</param>
        /// <param name="correlationId">The correlation id of the last stack
        /// upsert or delete operation. It is in GUID format and is used for
        /// tracing.</param>
        /// <param name="detachedResources">An array of resources that were
        /// detached during the most recent Deployment stack update. Detached
        /// means that the resource was removed from the template, but no
        /// relevant deletion operations were specified. So, the resource still
        /// exists while no longer being associated with the stack.</param>
        /// <param name="deletedResources">An array of resources that were
        /// deleted during the most recent Deployment stack update. Deleted
        /// means that the resource was removed from the template and relevant
        /// deletion operations were specified.</param>
        /// <param name="failedResources">An array of resources that failed to
        /// reach goal state during the most recent update. Each resourceId is
        /// accompanied by an error message.</param>
        /// <param name="resources">An array of resources currently managed by
        /// the deployment stack.</param>
        /// <param name="deploymentId">The resourceId of the deployment
        /// resource created by the deployment stack.</param>
        /// <param name="outputs">The outputs of the deployment resource
        /// created by the deployment stack.</param>
        /// <param name="duration">The duration of the last successful
        /// Deployment stack update.</param>
        public DeploymentStackProperties(DeploymentStackPropertiesActionOnUnmanage actionOnUnmanage, DenySettings denySettings, ErrorResponse error = default(ErrorResponse), object template = default(object), DeploymentStacksTemplateLink templateLink = default(DeploymentStacksTemplateLink), IDictionary<string, DeploymentParameter> parameters = default(IDictionary<string, DeploymentParameter>), DeploymentStacksParametersLink parametersLink = default(DeploymentStacksParametersLink), DeploymentStacksDebugSetting debugSetting = default(DeploymentStacksDebugSetting), string deploymentScope = default(string), string description = default(string), string provisioningState = default(string), string correlationId = default(string), IList<ResourceReference> detachedResources = default(IList<ResourceReference>), IList<ResourceReference> deletedResources = default(IList<ResourceReference>), IList<ResourceReferenceExtended> failedResources = default(IList<ResourceReferenceExtended>), IList<ManagedResourceReference> resources = default(IList<ManagedResourceReference>), string deploymentId = default(string), object outputs = default(object), string duration = default(string))
            : base(error)
        {
            Template = template;
            TemplateLink = templateLink;
            Parameters = parameters;
            ParametersLink = parametersLink;
            ActionOnUnmanage = actionOnUnmanage;
            DebugSetting = debugSetting;
            DeploymentScope = deploymentScope;
            Description = description;
            DenySettings = denySettings;
            ProvisioningState = provisioningState;
            CorrelationId = correlationId;
            DetachedResources = detachedResources;
            DeletedResources = deletedResources;
            FailedResources = failedResources;
            Resources = resources;
            DeploymentId = deploymentId;
            Outputs = outputs;
            Duration = duration;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the template content. You use this element when you
        /// want to pass the template syntax directly in the request rather
        /// than link to an existing template. It can be a JObject or
        /// well-formed JSON string. Use either the templateLink property or
        /// the template property, but not both.
        /// </summary>
        [JsonProperty(PropertyName = "template")]
        public object Template { get; set; }

        /// <summary>
        /// Gets or sets the URI of the template. Use either the templateLink
        /// property or the template property, but not both.
        /// </summary>
        [JsonProperty(PropertyName = "templateLink")]
        public DeploymentStacksTemplateLink TemplateLink { get; set; }

        /// <summary>
        /// Gets or sets name and value pairs that define the deployment
        /// parameters for the template. Use this element when providing the
        /// parameter values directly in the request, rather than linking to an
        /// existing parameter file. Use either the parametersLink property or
        /// the parameters property, but not both.
        /// </summary>
        [JsonProperty(PropertyName = "parameters")]
        public IDictionary<string, DeploymentParameter> Parameters { get; set; }

        /// <summary>
        /// Gets or sets the URI of parameters file. Use this element to link
        /// to an existing parameters file. Use either the parametersLink
        /// property or the parameters property, but not both.
        /// </summary>
        [JsonProperty(PropertyName = "parametersLink")]
        public DeploymentStacksParametersLink ParametersLink { get; set; }

        /// <summary>
        /// Gets or sets defines the behavior of resources that are no longer
        /// managed after the stack is updated or deleted.
        /// </summary>
        [JsonProperty(PropertyName = "actionOnUnmanage")]
        public DeploymentStackPropertiesActionOnUnmanage ActionOnUnmanage { get; set; }

        /// <summary>
        /// Gets or sets the debug setting of the deployment.
        /// </summary>
        [JsonProperty(PropertyName = "debugSetting")]
        public DeploymentStacksDebugSetting DebugSetting { get; set; }

        /// <summary>
        /// Gets or sets the scope at which the initial deployment should be
        /// created. If a scope is not specified, it will default to the scope
        /// of the deployment stack. Valid scopes are: management group
        /// (format:
        /// '/providers/Microsoft.Management/managementGroups/{managementGroupId}'),
        /// subscription (format: '/subscriptions/{subscriptionId}'), resource
        /// group (format:
        /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}').
        /// </summary>
        [JsonProperty(PropertyName = "deploymentScope")]
        public string DeploymentScope { get; set; }

        /// <summary>
        /// Gets or sets deployment stack description. Max length of 4096
        /// characters.
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets defines how resources deployed by the stack are
        /// locked.
        /// </summary>
        [JsonProperty(PropertyName = "denySettings")]
        public DenySettings DenySettings { get; set; }

        /// <summary>
        /// Gets state of the deployment stack. Possible values include:
        /// 'creating', 'validating', 'waiting', 'deploying', 'canceling',
        /// 'locking', 'deletingResources', 'succeeded', 'failed', 'canceled',
        /// 'deleting'
        /// </summary>
        [JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets the correlation id of the last stack upsert or delete
        /// operation. It is in GUID format and is used for tracing.
        /// </summary>
        [JsonProperty(PropertyName = "correlationId")]
        public string CorrelationId { get; private set; }

        /// <summary>
        /// Gets an array of resources that were detached during the most
        /// recent Deployment stack update. Detached means that the resource
        /// was removed from the template, but no relevant deletion operations
        /// were specified. So, the resource still exists while no longer being
        /// associated with the stack.
        /// </summary>
        [JsonProperty(PropertyName = "detachedResources")]
        public IList<ResourceReference> DetachedResources { get; private set; }

        /// <summary>
        /// Gets an array of resources that were deleted during the most recent
        /// Deployment stack update. Deleted means that the resource was
        /// removed from the template and relevant deletion operations were
        /// specified.
        /// </summary>
        [JsonProperty(PropertyName = "deletedResources")]
        public IList<ResourceReference> DeletedResources { get; private set; }

        /// <summary>
        /// Gets an array of resources that failed to reach goal state during
        /// the most recent update. Each resourceId is accompanied by an error
        /// message.
        /// </summary>
        [JsonProperty(PropertyName = "failedResources")]
        public IList<ResourceReferenceExtended> FailedResources { get; private set; }

        /// <summary>
        /// Gets an array of resources currently managed by the deployment
        /// stack.
        /// </summary>
        [JsonProperty(PropertyName = "resources")]
        public IList<ManagedResourceReference> Resources { get; private set; }

        /// <summary>
        /// Gets the resourceId of the deployment resource created by the
        /// deployment stack.
        /// </summary>
        [JsonProperty(PropertyName = "deploymentId")]
        public string DeploymentId { get; private set; }

        /// <summary>
        /// Gets the outputs of the deployment resource created by the
        /// deployment stack.
        /// </summary>
        [JsonProperty(PropertyName = "outputs")]
        public object Outputs { get; private set; }

        /// <summary>
        /// Gets the duration of the last successful Deployment stack update.
        /// </summary>
        [JsonProperty(PropertyName = "duration")]
        public string Duration { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ActionOnUnmanage == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ActionOnUnmanage");
            }
            if (DenySettings == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DenySettings");
            }
            if (Parameters != null)
            {
                foreach (var valueElement in Parameters.Values)
                {
                    if (valueElement != null)
                    {
                        valueElement.Validate();
                    }
                }
            }
            if (ParametersLink != null)
            {
                ParametersLink.Validate();
            }
            if (ActionOnUnmanage != null)
            {
                ActionOnUnmanage.Validate();
            }
            if (Description != null)
            {
                if (Description.Length > 4096)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Description", 4096);
                }
            }
            if (DenySettings != null)
            {
                DenySettings.Validate();
            }
        }
    }
}
