// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Resources.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Deployment parameter for the template.
    /// </summary>
    public partial class DeploymentParameter
    {
        /// <summary>
        /// Initializes a new instance of the DeploymentParameter class.
        /// </summary>
        public DeploymentParameter()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DeploymentParameter class.
        /// </summary>
        /// <param name="value">Input value to the parameter.</param>
        /// <param name="reference">Azure Key Vault parameter
        /// reference.</param>
        public DeploymentParameter(object value = default(object), KeyVaultParameterReference reference = default(KeyVaultParameterReference))
        {
            Value = value;
            Reference = reference;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets input value to the parameter.
        /// </summary>
        [JsonProperty(PropertyName = "value")]
        public object Value { get; set; }

        /// <summary>
        /// Gets or sets azure Key Vault parameter reference.
        /// </summary>
        [JsonProperty(PropertyName = "reference")]
        public KeyVaultParameterReference Reference { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Reference != null)
            {
                Reference.Validate();
            }
        }
    }
}
