// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Resources
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for DeploymentStacksOperations.
    /// </summary>
    public static partial class DeploymentStacksOperationsExtensions
    {
            /// <summary>
            /// Lists all the Deployment stacks within the specified Resource Group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            public static IPage<DeploymentStack> ListAtResourceGroup(this IDeploymentStacksOperations operations, string resourceGroupName)
            {
                return operations.ListAtResourceGroupAsync(resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all the Deployment stacks within the specified Resource Group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DeploymentStack>> ListAtResourceGroupAsync(this IDeploymentStacksOperations operations, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAtResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists all the Deployment stacks within the specified Subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<DeploymentStack> ListAtSubscription(this IDeploymentStacksOperations operations)
            {
                return operations.ListAtSubscriptionAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all the Deployment stacks within the specified Subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DeploymentStack>> ListAtSubscriptionAsync(this IDeploymentStacksOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAtSubscriptionWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists all the Deployment stacks within the specified Management Group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='managementGroupId'>
            /// Management Group id.
            /// </param>
            public static IPage<DeploymentStack> ListAtManagementGroup(this IDeploymentStacksOperations operations, string managementGroupId)
            {
                return operations.ListAtManagementGroupAsync(managementGroupId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all the Deployment stacks within the specified Management Group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='managementGroupId'>
            /// Management Group id.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DeploymentStack>> ListAtManagementGroupAsync(this IDeploymentStacksOperations operations, string managementGroupId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAtManagementGroupWithHttpMessagesAsync(managementGroupId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates a Deployment stack at Resource Group scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='deploymentStackName'>
            /// Name of the deployment stack.
            /// </param>
            /// <param name='deploymentStack'>
            /// Deployment stack supplied to the operation.
            /// </param>
            public static DeploymentStack CreateOrUpdateAtResourceGroup(this IDeploymentStacksOperations operations, string resourceGroupName, string deploymentStackName, DeploymentStack deploymentStack)
            {
                return operations.CreateOrUpdateAtResourceGroupAsync(resourceGroupName, deploymentStackName, deploymentStack).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a Deployment stack at Resource Group scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='deploymentStackName'>
            /// Name of the deployment stack.
            /// </param>
            /// <param name='deploymentStack'>
            /// Deployment stack supplied to the operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeploymentStack> CreateOrUpdateAtResourceGroupAsync(this IDeploymentStacksOperations operations, string resourceGroupName, string deploymentStackName, DeploymentStack deploymentStack, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateAtResourceGroupWithHttpMessagesAsync(resourceGroupName, deploymentStackName, deploymentStack, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a Deployment stack with a given name at Resource Group scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='deploymentStackName'>
            /// Name of the deployment stack.
            /// </param>
            public static DeploymentStack GetAtResourceGroup(this IDeploymentStacksOperations operations, string resourceGroupName, string deploymentStackName)
            {
                return operations.GetAtResourceGroupAsync(resourceGroupName, deploymentStackName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a Deployment stack with a given name at Resource Group scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='deploymentStackName'>
            /// Name of the deployment stack.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeploymentStack> GetAtResourceGroupAsync(this IDeploymentStacksOperations operations, string resourceGroupName, string deploymentStackName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAtResourceGroupWithHttpMessagesAsync(resourceGroupName, deploymentStackName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a Deployment stack by name at Resource Group scope. When operation
            /// completes, status code 200 returned without content.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='deploymentStackName'>
            /// Name of the deployment stack.
            /// </param>
            /// <param name='unmanageActionResources'>
            /// Flag to indicate delete rather than detach for unmanaged resources.
            /// Possible values include: 'delete', 'detach'
            /// </param>
            /// <param name='unmanageActionResourceGroups'>
            /// Flag to indicate delete rather than detach for unmanaged resource groups.
            /// Possible values include: 'delete', 'detach'
            /// </param>
            /// <param name='unmanageActionManagementGroups'>
            /// Flag to indicate delete rather than detach for unmanaged management groups.
            /// Possible values include: 'delete', 'detach'
            /// </param>
            public static DeploymentStacksDeleteAtResourceGroupHeaders DeleteAtResourceGroup(this IDeploymentStacksOperations operations, string resourceGroupName, string deploymentStackName, string unmanageActionResources = default(string), string unmanageActionResourceGroups = default(string), string unmanageActionManagementGroups = default(string))
            {
                return operations.DeleteAtResourceGroupAsync(resourceGroupName, deploymentStackName, unmanageActionResources, unmanageActionResourceGroups, unmanageActionManagementGroups).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a Deployment stack by name at Resource Group scope. When operation
            /// completes, status code 200 returned without content.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='deploymentStackName'>
            /// Name of the deployment stack.
            /// </param>
            /// <param name='unmanageActionResources'>
            /// Flag to indicate delete rather than detach for unmanaged resources.
            /// Possible values include: 'delete', 'detach'
            /// </param>
            /// <param name='unmanageActionResourceGroups'>
            /// Flag to indicate delete rather than detach for unmanaged resource groups.
            /// Possible values include: 'delete', 'detach'
            /// </param>
            /// <param name='unmanageActionManagementGroups'>
            /// Flag to indicate delete rather than detach for unmanaged management groups.
            /// Possible values include: 'delete', 'detach'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeploymentStacksDeleteAtResourceGroupHeaders> DeleteAtResourceGroupAsync(this IDeploymentStacksOperations operations, string resourceGroupName, string deploymentStackName, string unmanageActionResources = default(string), string unmanageActionResourceGroups = default(string), string unmanageActionManagementGroups = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteAtResourceGroupWithHttpMessagesAsync(resourceGroupName, deploymentStackName, unmanageActionResources, unmanageActionResourceGroups, unmanageActionManagementGroups, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Creates or updates a Deployment stack at Subscription scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deploymentStackName'>
            /// Name of the deployment stack.
            /// </param>
            /// <param name='deploymentStack'>
            /// Deployment stack supplied to the operation.
            /// </param>
            public static DeploymentStack CreateOrUpdateAtSubscription(this IDeploymentStacksOperations operations, string deploymentStackName, DeploymentStack deploymentStack)
            {
                return operations.CreateOrUpdateAtSubscriptionAsync(deploymentStackName, deploymentStack).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a Deployment stack at Subscription scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deploymentStackName'>
            /// Name of the deployment stack.
            /// </param>
            /// <param name='deploymentStack'>
            /// Deployment stack supplied to the operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeploymentStack> CreateOrUpdateAtSubscriptionAsync(this IDeploymentStacksOperations operations, string deploymentStackName, DeploymentStack deploymentStack, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateAtSubscriptionWithHttpMessagesAsync(deploymentStackName, deploymentStack, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a Deployment stack with a given name at Subscription scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deploymentStackName'>
            /// Name of the deployment stack.
            /// </param>
            public static DeploymentStack GetAtSubscription(this IDeploymentStacksOperations operations, string deploymentStackName)
            {
                return operations.GetAtSubscriptionAsync(deploymentStackName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a Deployment stack with a given name at Subscription scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deploymentStackName'>
            /// Name of the deployment stack.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeploymentStack> GetAtSubscriptionAsync(this IDeploymentStacksOperations operations, string deploymentStackName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAtSubscriptionWithHttpMessagesAsync(deploymentStackName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a Deployment stack by name at Subscription scope. When operation
            /// completes, status code 200 returned without content.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deploymentStackName'>
            /// Name of the deployment stack.
            /// </param>
            /// <param name='unmanageActionResources'>
            /// Flag to indicate delete rather than detach for unmanaged resources.
            /// Possible values include: 'delete', 'detach'
            /// </param>
            /// <param name='unmanageActionResourceGroups'>
            /// Flag to indicate delete rather than detach for unmanaged resource groups.
            /// Possible values include: 'delete', 'detach'
            /// </param>
            /// <param name='unmanageActionManagementGroups'>
            /// Flag to indicate delete rather than detach for unmanaged management groups.
            /// Possible values include: 'delete', 'detach'
            /// </param>
            public static DeploymentStacksDeleteAtSubscriptionHeaders DeleteAtSubscription(this IDeploymentStacksOperations operations, string deploymentStackName, string unmanageActionResources = default(string), string unmanageActionResourceGroups = default(string), string unmanageActionManagementGroups = default(string))
            {
                return operations.DeleteAtSubscriptionAsync(deploymentStackName, unmanageActionResources, unmanageActionResourceGroups, unmanageActionManagementGroups).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a Deployment stack by name at Subscription scope. When operation
            /// completes, status code 200 returned without content.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deploymentStackName'>
            /// Name of the deployment stack.
            /// </param>
            /// <param name='unmanageActionResources'>
            /// Flag to indicate delete rather than detach for unmanaged resources.
            /// Possible values include: 'delete', 'detach'
            /// </param>
            /// <param name='unmanageActionResourceGroups'>
            /// Flag to indicate delete rather than detach for unmanaged resource groups.
            /// Possible values include: 'delete', 'detach'
            /// </param>
            /// <param name='unmanageActionManagementGroups'>
            /// Flag to indicate delete rather than detach for unmanaged management groups.
            /// Possible values include: 'delete', 'detach'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeploymentStacksDeleteAtSubscriptionHeaders> DeleteAtSubscriptionAsync(this IDeploymentStacksOperations operations, string deploymentStackName, string unmanageActionResources = default(string), string unmanageActionResourceGroups = default(string), string unmanageActionManagementGroups = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteAtSubscriptionWithHttpMessagesAsync(deploymentStackName, unmanageActionResources, unmanageActionResourceGroups, unmanageActionManagementGroups, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Creates or updates a Deployment stack at Management Group scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='managementGroupId'>
            /// Management Group id.
            /// </param>
            /// <param name='deploymentStackName'>
            /// Name of the deployment stack.
            /// </param>
            /// <param name='deploymentStack'>
            /// Deployment stack supplied to the operation.
            /// </param>
            public static DeploymentStack CreateOrUpdateAtManagementGroup(this IDeploymentStacksOperations operations, string managementGroupId, string deploymentStackName, DeploymentStack deploymentStack)
            {
                return operations.CreateOrUpdateAtManagementGroupAsync(managementGroupId, deploymentStackName, deploymentStack).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a Deployment stack at Management Group scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='managementGroupId'>
            /// Management Group id.
            /// </param>
            /// <param name='deploymentStackName'>
            /// Name of the deployment stack.
            /// </param>
            /// <param name='deploymentStack'>
            /// Deployment stack supplied to the operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeploymentStack> CreateOrUpdateAtManagementGroupAsync(this IDeploymentStacksOperations operations, string managementGroupId, string deploymentStackName, DeploymentStack deploymentStack, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateAtManagementGroupWithHttpMessagesAsync(managementGroupId, deploymentStackName, deploymentStack, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a Deployment stack with a given name at Management Group scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='managementGroupId'>
            /// Management Group id.
            /// </param>
            /// <param name='deploymentStackName'>
            /// Name of the deployment stack.
            /// </param>
            public static DeploymentStack GetAtManagementGroup(this IDeploymentStacksOperations operations, string managementGroupId, string deploymentStackName)
            {
                return operations.GetAtManagementGroupAsync(managementGroupId, deploymentStackName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a Deployment stack with a given name at Management Group scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='managementGroupId'>
            /// Management Group id.
            /// </param>
            /// <param name='deploymentStackName'>
            /// Name of the deployment stack.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeploymentStack> GetAtManagementGroupAsync(this IDeploymentStacksOperations operations, string managementGroupId, string deploymentStackName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAtManagementGroupWithHttpMessagesAsync(managementGroupId, deploymentStackName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a Deployment stack by name at Management Group scope. When
            /// operation completes, status code 200 returned without content.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='managementGroupId'>
            /// Management Group id.
            /// </param>
            /// <param name='deploymentStackName'>
            /// Name of the deployment stack.
            /// </param>
            /// <param name='unmanageActionResources'>
            /// Flag to indicate delete rather than detach for unmanaged resources.
            /// Possible values include: 'delete', 'detach'
            /// </param>
            /// <param name='unmanageActionResourceGroups'>
            /// Flag to indicate delete rather than detach for unmanaged resource groups.
            /// Possible values include: 'delete', 'detach'
            /// </param>
            /// <param name='unmanageActionManagementGroups'>
            /// Flag to indicate delete rather than detach for unmanaged management groups.
            /// Possible values include: 'delete', 'detach'
            /// </param>
            public static DeploymentStacksDeleteAtManagementGroupHeaders DeleteAtManagementGroup(this IDeploymentStacksOperations operations, string managementGroupId, string deploymentStackName, string unmanageActionResources = default(string), string unmanageActionResourceGroups = default(string), string unmanageActionManagementGroups = default(string))
            {
                return operations.DeleteAtManagementGroupAsync(managementGroupId, deploymentStackName, unmanageActionResources, unmanageActionResourceGroups, unmanageActionManagementGroups).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a Deployment stack by name at Management Group scope. When
            /// operation completes, status code 200 returned without content.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='managementGroupId'>
            /// Management Group id.
            /// </param>
            /// <param name='deploymentStackName'>
            /// Name of the deployment stack.
            /// </param>
            /// <param name='unmanageActionResources'>
            /// Flag to indicate delete rather than detach for unmanaged resources.
            /// Possible values include: 'delete', 'detach'
            /// </param>
            /// <param name='unmanageActionResourceGroups'>
            /// Flag to indicate delete rather than detach for unmanaged resource groups.
            /// Possible values include: 'delete', 'detach'
            /// </param>
            /// <param name='unmanageActionManagementGroups'>
            /// Flag to indicate delete rather than detach for unmanaged management groups.
            /// Possible values include: 'delete', 'detach'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeploymentStacksDeleteAtManagementGroupHeaders> DeleteAtManagementGroupAsync(this IDeploymentStacksOperations operations, string managementGroupId, string deploymentStackName, string unmanageActionResources = default(string), string unmanageActionResourceGroups = default(string), string unmanageActionManagementGroups = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteAtManagementGroupWithHttpMessagesAsync(managementGroupId, deploymentStackName, unmanageActionResources, unmanageActionResourceGroups, unmanageActionManagementGroups, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Exports the template used to create the Deployment stack at Resource Group
            /// scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='deploymentStackName'>
            /// Name of the deployment stack.
            /// </param>
            public static DeploymentStackTemplateDefinition ExportTemplateAtResourceGroup(this IDeploymentStacksOperations operations, string resourceGroupName, string deploymentStackName)
            {
                return operations.ExportTemplateAtResourceGroupAsync(resourceGroupName, deploymentStackName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Exports the template used to create the Deployment stack at Resource Group
            /// scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='deploymentStackName'>
            /// Name of the deployment stack.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeploymentStackTemplateDefinition> ExportTemplateAtResourceGroupAsync(this IDeploymentStacksOperations operations, string resourceGroupName, string deploymentStackName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ExportTemplateAtResourceGroupWithHttpMessagesAsync(resourceGroupName, deploymentStackName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Exports the template used to create the Deployment stack at Subscription
            /// scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deploymentStackName'>
            /// Name of the deployment stack.
            /// </param>
            public static DeploymentStackTemplateDefinition ExportTemplateAtSubscription(this IDeploymentStacksOperations operations, string deploymentStackName)
            {
                return operations.ExportTemplateAtSubscriptionAsync(deploymentStackName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Exports the template used to create the Deployment stack at Subscription
            /// scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deploymentStackName'>
            /// Name of the deployment stack.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeploymentStackTemplateDefinition> ExportTemplateAtSubscriptionAsync(this IDeploymentStacksOperations operations, string deploymentStackName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ExportTemplateAtSubscriptionWithHttpMessagesAsync(deploymentStackName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Exports the template used to create the Deployment stack at Management
            /// Group scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='managementGroupId'>
            /// Management Group id.
            /// </param>
            /// <param name='deploymentStackName'>
            /// Name of the deployment stack.
            /// </param>
            public static DeploymentStackTemplateDefinition ExportTemplateAtManagementGroup(this IDeploymentStacksOperations operations, string managementGroupId, string deploymentStackName)
            {
                return operations.ExportTemplateAtManagementGroupAsync(managementGroupId, deploymentStackName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Exports the template used to create the Deployment stack at Management
            /// Group scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='managementGroupId'>
            /// Management Group id.
            /// </param>
            /// <param name='deploymentStackName'>
            /// Name of the deployment stack.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeploymentStackTemplateDefinition> ExportTemplateAtManagementGroupAsync(this IDeploymentStacksOperations operations, string managementGroupId, string deploymentStackName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ExportTemplateAtManagementGroupWithHttpMessagesAsync(managementGroupId, deploymentStackName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Runs preflight validation on the Resource Group scoped Deployment stack
            /// template to verify its acceptance to Azure Resource Manager.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='deploymentStackName'>
            /// Name of the deployment stack.
            /// </param>
            /// <param name='deploymentStack'>
            /// Deployment stack to validate.
            /// </param>
            public static DeploymentStacksPreflightValidateStackAtResourceGroupHeaders PreflightValidateStackAtResourceGroup(this IDeploymentStacksOperations operations, string resourceGroupName, string deploymentStackName, DeploymentStack deploymentStack)
            {
                return operations.PreflightValidateStackAtResourceGroupAsync(resourceGroupName, deploymentStackName, deploymentStack).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Runs preflight validation on the Resource Group scoped Deployment stack
            /// template to verify its acceptance to Azure Resource Manager.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='deploymentStackName'>
            /// Name of the deployment stack.
            /// </param>
            /// <param name='deploymentStack'>
            /// Deployment stack to validate.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeploymentStacksPreflightValidateStackAtResourceGroupHeaders> PreflightValidateStackAtResourceGroupAsync(this IDeploymentStacksOperations operations, string resourceGroupName, string deploymentStackName, DeploymentStack deploymentStack, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PreflightValidateStackAtResourceGroupWithHttpMessagesAsync(resourceGroupName, deploymentStackName, deploymentStack, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Runs preflight validation on the Subscription scoped Deployment stack
            /// template to verify its acceptance to Azure Resource Manager.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deploymentStackName'>
            /// Name of the deployment stack.
            /// </param>
            /// <param name='deploymentStack'>
            /// Deployment stack to validate.
            /// </param>
            public static DeploymentStacksPreflightValidateStackAtSubscriptionHeaders PreflightValidateStackAtSubscription(this IDeploymentStacksOperations operations, string deploymentStackName, DeploymentStack deploymentStack)
            {
                return operations.PreflightValidateStackAtSubscriptionAsync(deploymentStackName, deploymentStack).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Runs preflight validation on the Subscription scoped Deployment stack
            /// template to verify its acceptance to Azure Resource Manager.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deploymentStackName'>
            /// Name of the deployment stack.
            /// </param>
            /// <param name='deploymentStack'>
            /// Deployment stack to validate.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeploymentStacksPreflightValidateStackAtSubscriptionHeaders> PreflightValidateStackAtSubscriptionAsync(this IDeploymentStacksOperations operations, string deploymentStackName, DeploymentStack deploymentStack, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PreflightValidateStackAtSubscriptionWithHttpMessagesAsync(deploymentStackName, deploymentStack, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Runs preflight validation on the Management Group scoped Deployment stack
            /// template to verify its acceptance to Azure Resource Manager.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='managementGroupId'>
            /// Management Group id.
            /// </param>
            /// <param name='deploymentStackName'>
            /// Name of the deployment stack.
            /// </param>
            /// <param name='deploymentStack'>
            /// Deployment stack to validate.
            /// </param>
            public static DeploymentStacksPreflightValidateStackAtManagementGroupHeaders PreflightValidateStackAtManagementGroup(this IDeploymentStacksOperations operations, string managementGroupId, string deploymentStackName, DeploymentStack deploymentStack)
            {
                return operations.PreflightValidateStackAtManagementGroupAsync(managementGroupId, deploymentStackName, deploymentStack).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Runs preflight validation on the Management Group scoped Deployment stack
            /// template to verify its acceptance to Azure Resource Manager.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='managementGroupId'>
            /// Management Group id.
            /// </param>
            /// <param name='deploymentStackName'>
            /// Name of the deployment stack.
            /// </param>
            /// <param name='deploymentStack'>
            /// Deployment stack to validate.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeploymentStacksPreflightValidateStackAtManagementGroupHeaders> PreflightValidateStackAtManagementGroupAsync(this IDeploymentStacksOperations operations, string managementGroupId, string deploymentStackName, DeploymentStack deploymentStack, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PreflightValidateStackAtManagementGroupWithHttpMessagesAsync(managementGroupId, deploymentStackName, deploymentStack, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Creates or updates a Deployment stack at Resource Group scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='deploymentStackName'>
            /// Name of the deployment stack.
            /// </param>
            /// <param name='deploymentStack'>
            /// Deployment stack supplied to the operation.
            /// </param>
            public static DeploymentStack BeginCreateOrUpdateAtResourceGroup(this IDeploymentStacksOperations operations, string resourceGroupName, string deploymentStackName, DeploymentStack deploymentStack)
            {
                return operations.BeginCreateOrUpdateAtResourceGroupAsync(resourceGroupName, deploymentStackName, deploymentStack).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a Deployment stack at Resource Group scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='deploymentStackName'>
            /// Name of the deployment stack.
            /// </param>
            /// <param name='deploymentStack'>
            /// Deployment stack supplied to the operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeploymentStack> BeginCreateOrUpdateAtResourceGroupAsync(this IDeploymentStacksOperations operations, string resourceGroupName, string deploymentStackName, DeploymentStack deploymentStack, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateAtResourceGroupWithHttpMessagesAsync(resourceGroupName, deploymentStackName, deploymentStack, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a Deployment stack by name at Resource Group scope. When operation
            /// completes, status code 200 returned without content.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='deploymentStackName'>
            /// Name of the deployment stack.
            /// </param>
            /// <param name='unmanageActionResources'>
            /// Flag to indicate delete rather than detach for unmanaged resources.
            /// Possible values include: 'delete', 'detach'
            /// </param>
            /// <param name='unmanageActionResourceGroups'>
            /// Flag to indicate delete rather than detach for unmanaged resource groups.
            /// Possible values include: 'delete', 'detach'
            /// </param>
            /// <param name='unmanageActionManagementGroups'>
            /// Flag to indicate delete rather than detach for unmanaged management groups.
            /// Possible values include: 'delete', 'detach'
            /// </param>
            public static DeploymentStacksDeleteAtResourceGroupHeaders BeginDeleteAtResourceGroup(this IDeploymentStacksOperations operations, string resourceGroupName, string deploymentStackName, string unmanageActionResources = default(string), string unmanageActionResourceGroups = default(string), string unmanageActionManagementGroups = default(string))
            {
                return operations.BeginDeleteAtResourceGroupAsync(resourceGroupName, deploymentStackName, unmanageActionResources, unmanageActionResourceGroups, unmanageActionManagementGroups).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a Deployment stack by name at Resource Group scope. When operation
            /// completes, status code 200 returned without content.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='deploymentStackName'>
            /// Name of the deployment stack.
            /// </param>
            /// <param name='unmanageActionResources'>
            /// Flag to indicate delete rather than detach for unmanaged resources.
            /// Possible values include: 'delete', 'detach'
            /// </param>
            /// <param name='unmanageActionResourceGroups'>
            /// Flag to indicate delete rather than detach for unmanaged resource groups.
            /// Possible values include: 'delete', 'detach'
            /// </param>
            /// <param name='unmanageActionManagementGroups'>
            /// Flag to indicate delete rather than detach for unmanaged management groups.
            /// Possible values include: 'delete', 'detach'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeploymentStacksDeleteAtResourceGroupHeaders> BeginDeleteAtResourceGroupAsync(this IDeploymentStacksOperations operations, string resourceGroupName, string deploymentStackName, string unmanageActionResources = default(string), string unmanageActionResourceGroups = default(string), string unmanageActionManagementGroups = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginDeleteAtResourceGroupWithHttpMessagesAsync(resourceGroupName, deploymentStackName, unmanageActionResources, unmanageActionResourceGroups, unmanageActionManagementGroups, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Creates or updates a Deployment stack at Subscription scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deploymentStackName'>
            /// Name of the deployment stack.
            /// </param>
            /// <param name='deploymentStack'>
            /// Deployment stack supplied to the operation.
            /// </param>
            public static DeploymentStack BeginCreateOrUpdateAtSubscription(this IDeploymentStacksOperations operations, string deploymentStackName, DeploymentStack deploymentStack)
            {
                return operations.BeginCreateOrUpdateAtSubscriptionAsync(deploymentStackName, deploymentStack).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a Deployment stack at Subscription scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deploymentStackName'>
            /// Name of the deployment stack.
            /// </param>
            /// <param name='deploymentStack'>
            /// Deployment stack supplied to the operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeploymentStack> BeginCreateOrUpdateAtSubscriptionAsync(this IDeploymentStacksOperations operations, string deploymentStackName, DeploymentStack deploymentStack, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateAtSubscriptionWithHttpMessagesAsync(deploymentStackName, deploymentStack, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a Deployment stack by name at Subscription scope. When operation
            /// completes, status code 200 returned without content.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deploymentStackName'>
            /// Name of the deployment stack.
            /// </param>
            /// <param name='unmanageActionResources'>
            /// Flag to indicate delete rather than detach for unmanaged resources.
            /// Possible values include: 'delete', 'detach'
            /// </param>
            /// <param name='unmanageActionResourceGroups'>
            /// Flag to indicate delete rather than detach for unmanaged resource groups.
            /// Possible values include: 'delete', 'detach'
            /// </param>
            /// <param name='unmanageActionManagementGroups'>
            /// Flag to indicate delete rather than detach for unmanaged management groups.
            /// Possible values include: 'delete', 'detach'
            /// </param>
            public static DeploymentStacksDeleteAtSubscriptionHeaders BeginDeleteAtSubscription(this IDeploymentStacksOperations operations, string deploymentStackName, string unmanageActionResources = default(string), string unmanageActionResourceGroups = default(string), string unmanageActionManagementGroups = default(string))
            {
                return operations.BeginDeleteAtSubscriptionAsync(deploymentStackName, unmanageActionResources, unmanageActionResourceGroups, unmanageActionManagementGroups).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a Deployment stack by name at Subscription scope. When operation
            /// completes, status code 200 returned without content.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deploymentStackName'>
            /// Name of the deployment stack.
            /// </param>
            /// <param name='unmanageActionResources'>
            /// Flag to indicate delete rather than detach for unmanaged resources.
            /// Possible values include: 'delete', 'detach'
            /// </param>
            /// <param name='unmanageActionResourceGroups'>
            /// Flag to indicate delete rather than detach for unmanaged resource groups.
            /// Possible values include: 'delete', 'detach'
            /// </param>
            /// <param name='unmanageActionManagementGroups'>
            /// Flag to indicate delete rather than detach for unmanaged management groups.
            /// Possible values include: 'delete', 'detach'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeploymentStacksDeleteAtSubscriptionHeaders> BeginDeleteAtSubscriptionAsync(this IDeploymentStacksOperations operations, string deploymentStackName, string unmanageActionResources = default(string), string unmanageActionResourceGroups = default(string), string unmanageActionManagementGroups = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginDeleteAtSubscriptionWithHttpMessagesAsync(deploymentStackName, unmanageActionResources, unmanageActionResourceGroups, unmanageActionManagementGroups, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Creates or updates a Deployment stack at Management Group scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='managementGroupId'>
            /// Management Group id.
            /// </param>
            /// <param name='deploymentStackName'>
            /// Name of the deployment stack.
            /// </param>
            /// <param name='deploymentStack'>
            /// Deployment stack supplied to the operation.
            /// </param>
            public static DeploymentStack BeginCreateOrUpdateAtManagementGroup(this IDeploymentStacksOperations operations, string managementGroupId, string deploymentStackName, DeploymentStack deploymentStack)
            {
                return operations.BeginCreateOrUpdateAtManagementGroupAsync(managementGroupId, deploymentStackName, deploymentStack).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a Deployment stack at Management Group scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='managementGroupId'>
            /// Management Group id.
            /// </param>
            /// <param name='deploymentStackName'>
            /// Name of the deployment stack.
            /// </param>
            /// <param name='deploymentStack'>
            /// Deployment stack supplied to the operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeploymentStack> BeginCreateOrUpdateAtManagementGroupAsync(this IDeploymentStacksOperations operations, string managementGroupId, string deploymentStackName, DeploymentStack deploymentStack, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateAtManagementGroupWithHttpMessagesAsync(managementGroupId, deploymentStackName, deploymentStack, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a Deployment stack by name at Management Group scope. When
            /// operation completes, status code 200 returned without content.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='managementGroupId'>
            /// Management Group id.
            /// </param>
            /// <param name='deploymentStackName'>
            /// Name of the deployment stack.
            /// </param>
            /// <param name='unmanageActionResources'>
            /// Flag to indicate delete rather than detach for unmanaged resources.
            /// Possible values include: 'delete', 'detach'
            /// </param>
            /// <param name='unmanageActionResourceGroups'>
            /// Flag to indicate delete rather than detach for unmanaged resource groups.
            /// Possible values include: 'delete', 'detach'
            /// </param>
            /// <param name='unmanageActionManagementGroups'>
            /// Flag to indicate delete rather than detach for unmanaged management groups.
            /// Possible values include: 'delete', 'detach'
            /// </param>
            public static DeploymentStacksDeleteAtManagementGroupHeaders BeginDeleteAtManagementGroup(this IDeploymentStacksOperations operations, string managementGroupId, string deploymentStackName, string unmanageActionResources = default(string), string unmanageActionResourceGroups = default(string), string unmanageActionManagementGroups = default(string))
            {
                return operations.BeginDeleteAtManagementGroupAsync(managementGroupId, deploymentStackName, unmanageActionResources, unmanageActionResourceGroups, unmanageActionManagementGroups).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a Deployment stack by name at Management Group scope. When
            /// operation completes, status code 200 returned without content.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='managementGroupId'>
            /// Management Group id.
            /// </param>
            /// <param name='deploymentStackName'>
            /// Name of the deployment stack.
            /// </param>
            /// <param name='unmanageActionResources'>
            /// Flag to indicate delete rather than detach for unmanaged resources.
            /// Possible values include: 'delete', 'detach'
            /// </param>
            /// <param name='unmanageActionResourceGroups'>
            /// Flag to indicate delete rather than detach for unmanaged resource groups.
            /// Possible values include: 'delete', 'detach'
            /// </param>
            /// <param name='unmanageActionManagementGroups'>
            /// Flag to indicate delete rather than detach for unmanaged management groups.
            /// Possible values include: 'delete', 'detach'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeploymentStacksDeleteAtManagementGroupHeaders> BeginDeleteAtManagementGroupAsync(this IDeploymentStacksOperations operations, string managementGroupId, string deploymentStackName, string unmanageActionResources = default(string), string unmanageActionResourceGroups = default(string), string unmanageActionManagementGroups = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginDeleteAtManagementGroupWithHttpMessagesAsync(managementGroupId, deploymentStackName, unmanageActionResources, unmanageActionResourceGroups, unmanageActionManagementGroups, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Runs preflight validation on the Resource Group scoped Deployment stack
            /// template to verify its acceptance to Azure Resource Manager.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='deploymentStackName'>
            /// Name of the deployment stack.
            /// </param>
            /// <param name='deploymentStack'>
            /// Deployment stack to validate.
            /// </param>
            public static DeploymentStacksPreflightValidateStackAtResourceGroupHeaders BeginPreflightValidateStackAtResourceGroup(this IDeploymentStacksOperations operations, string resourceGroupName, string deploymentStackName, DeploymentStack deploymentStack)
            {
                return operations.BeginPreflightValidateStackAtResourceGroupAsync(resourceGroupName, deploymentStackName, deploymentStack).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Runs preflight validation on the Resource Group scoped Deployment stack
            /// template to verify its acceptance to Azure Resource Manager.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='deploymentStackName'>
            /// Name of the deployment stack.
            /// </param>
            /// <param name='deploymentStack'>
            /// Deployment stack to validate.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeploymentStacksPreflightValidateStackAtResourceGroupHeaders> BeginPreflightValidateStackAtResourceGroupAsync(this IDeploymentStacksOperations operations, string resourceGroupName, string deploymentStackName, DeploymentStack deploymentStack, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginPreflightValidateStackAtResourceGroupWithHttpMessagesAsync(resourceGroupName, deploymentStackName, deploymentStack, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Runs preflight validation on the Subscription scoped Deployment stack
            /// template to verify its acceptance to Azure Resource Manager.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deploymentStackName'>
            /// Name of the deployment stack.
            /// </param>
            /// <param name='deploymentStack'>
            /// Deployment stack to validate.
            /// </param>
            public static DeploymentStacksPreflightValidateStackAtSubscriptionHeaders BeginPreflightValidateStackAtSubscription(this IDeploymentStacksOperations operations, string deploymentStackName, DeploymentStack deploymentStack)
            {
                return operations.BeginPreflightValidateStackAtSubscriptionAsync(deploymentStackName, deploymentStack).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Runs preflight validation on the Subscription scoped Deployment stack
            /// template to verify its acceptance to Azure Resource Manager.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deploymentStackName'>
            /// Name of the deployment stack.
            /// </param>
            /// <param name='deploymentStack'>
            /// Deployment stack to validate.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeploymentStacksPreflightValidateStackAtSubscriptionHeaders> BeginPreflightValidateStackAtSubscriptionAsync(this IDeploymentStacksOperations operations, string deploymentStackName, DeploymentStack deploymentStack, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginPreflightValidateStackAtSubscriptionWithHttpMessagesAsync(deploymentStackName, deploymentStack, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Runs preflight validation on the Management Group scoped Deployment stack
            /// template to verify its acceptance to Azure Resource Manager.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='managementGroupId'>
            /// Management Group id.
            /// </param>
            /// <param name='deploymentStackName'>
            /// Name of the deployment stack.
            /// </param>
            /// <param name='deploymentStack'>
            /// Deployment stack to validate.
            /// </param>
            public static DeploymentStacksPreflightValidateStackAtManagementGroupHeaders BeginPreflightValidateStackAtManagementGroup(this IDeploymentStacksOperations operations, string managementGroupId, string deploymentStackName, DeploymentStack deploymentStack)
            {
                return operations.BeginPreflightValidateStackAtManagementGroupAsync(managementGroupId, deploymentStackName, deploymentStack).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Runs preflight validation on the Management Group scoped Deployment stack
            /// template to verify its acceptance to Azure Resource Manager.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='managementGroupId'>
            /// Management Group id.
            /// </param>
            /// <param name='deploymentStackName'>
            /// Name of the deployment stack.
            /// </param>
            /// <param name='deploymentStack'>
            /// Deployment stack to validate.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeploymentStacksPreflightValidateStackAtManagementGroupHeaders> BeginPreflightValidateStackAtManagementGroupAsync(this IDeploymentStacksOperations operations, string managementGroupId, string deploymentStackName, DeploymentStack deploymentStack, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginPreflightValidateStackAtManagementGroupWithHttpMessagesAsync(managementGroupId, deploymentStackName, deploymentStack, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Lists all the Deployment stacks within the specified Resource Group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<DeploymentStack> ListAtResourceGroupNext(this IDeploymentStacksOperations operations, string nextPageLink)
            {
                return operations.ListAtResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all the Deployment stacks within the specified Resource Group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DeploymentStack>> ListAtResourceGroupNextAsync(this IDeploymentStacksOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAtResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists all the Deployment stacks within the specified Subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<DeploymentStack> ListAtSubscriptionNext(this IDeploymentStacksOperations operations, string nextPageLink)
            {
                return operations.ListAtSubscriptionNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all the Deployment stacks within the specified Subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DeploymentStack>> ListAtSubscriptionNextAsync(this IDeploymentStacksOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAtSubscriptionNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists all the Deployment stacks within the specified Management Group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<DeploymentStack> ListAtManagementGroupNext(this IDeploymentStacksOperations operations, string nextPageLink)
            {
                return operations.ListAtManagementGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all the Deployment stacks within the specified Management Group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DeploymentStack>> ListAtManagementGroupNextAsync(this IDeploymentStacksOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAtManagementGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
